/*
Topic : Implementation of Selection Sort
	
AIM: TO PERFORM SELECTION SORT

To write and execute Java program to Implementation of Selection Sort

<------------------------------------------------------------------------>
Pseudocode:
1.	SELECTION SORT(arr, n)  
2.	  
3.	Step 1: Repeat Steps 2 and 3 for i = 0 to n-1  
4.	Step 2: CALL SMALLEST(arr, i, n, pos)  
5.	Step 3: SWAP arr[i] with arr[pos]  
6.	[END OF LOOP]  
7.	Step 4: EXIT  
8.	  
9.	SMALLEST (arr, i, n, pos)  
10.	Step 1: [INITIALIZE] SET SMALL = arr[i]  
11.	Step 2: [INITIALIZE] SET pos = i  
12.	Step 3: Repeat for j = i+1 to n  
13.	if (SMALL > arr[j])  
14.	     SET SMALL = arr[j]  
15.	SET pos = j  
16.	[END OF if]  
17.	[END OF LOOP]  
18.	Step 4: RETURN pos  

<------------------------------------------------------------------------>

Explanation:
Lets consider the following array as an example: arr[] = {64, 25, 12, 22, 11}
First pass:
●	For the first position in the sorted array, the whole array is traversed from index 0 to 4 sequentially. The first position where 64 is stored presently, after traversing whole array it is clear that 11 is the lowest value.
   64   	   25   	   12   	   22   	   11   
●	Thus, replace 64 with 11. After one iteration 11, which happens to be the least value in the array, tends to appear in the first position of the sorted list.
   11   	   25   	   12   	   22   	   64   
Second Pass:
●	For the second position, where 25 is present, again traverse the rest of the array in a sequential manner.
   11   	   25   	   12   	   22   	   64   
●	After traversing, we found that 12 is the second lowest value in the array and it should appear at the second place in the array, thus swap these values.
   11   	   12   	   25   	   22   	   64   
Third Pass:
●	Now, for third place, where 25 is present again traverse the rest of the array and find the third least value present in the array.
   11   	   12   	   25   	   22   	   64   
●	While traversing, 22 came out to be the third least value and it should appear at the third place in the array, thus swap 22 with element present at third position.
   11   	   12   	   22   	   25   	   64   
Fourth pass:
●	Similarly, for fourth position traverse the rest of the array and find the fourth least element in the array 
●	As 25 is the 4th lowest value hence, it will place at the fourth position.
   11   	   12   	   22   	   25   	   64   
Fifth Pass:
●	At last the largest value present in the array automatically get placed at the last position in the array
●	The resulted array is the sorted array.

*/

<------------------------------------------------------------------------>

//Program Code:
import java.util.Arrays;

 public class selectSort
{  
    void selection(int a[]) 
{  // function to sort in ascending order 
    int t, v ,small;  
    int n = a.length;  
    for (t = 0; t < n-1; t++)  
    {  
        small = t;  
          
        for (v = t+1; v < n; v++)  
        if (a[v] < a[small])  
            small = v;  //minimum element in un-sorted array 
  

            // swap element first comes 
    int temp = a[small];  
    a[small] = a[t];  
    a[t] = temp;  
    }  
  
}  
void printArr(int a[]) 
{  // printing the element in sorted manner
    int i;  
    int n = a.length;  
    for (i = 0; i < n; i++)  
    System.out.print(a[i] + " ");  
}  
  
    public static void main(String[] args)

    {  
    int a[] = { 91, 49, 4, 19, 10, 21 };  
    selectSort ss = new selectSort();  
    System.out.println("\n\n\t before sorting array elements are - ");  
    ss.printArr(a);  
    ss.selection(a);  
    System.out.println("\n\n\t after sorting array elements are - ");  
    ss.printArr(a);  
    
    }  
}  

<------------------------------------------------------------------------>


/*
Output Screenshots:
correct input
*/
 
 <------------------------------------------------------------------------>
 
RESULT: Implementation of Selection Sort Thus, the programs for the given problem statements has been executed and the results are verified successfully.

<------------------------------------------------------------------------>
